{
	"info": {
		"_postman_id": "e5f3d8a1-7b5c-4e2c-9a9c-f8d6e7c5b4a3",
		"name": "API Eventi - Comune di Villa di Briano",
		"description": "Collection per testare l'API Eventi del Comune di Villa di Briano. Include richieste per tutti gli endpoint con supporto per autenticazione JWT.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Autenticazione",
			"item": [
				{
					"name": "Test Autenticazione",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/auth-test",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth-test"
							]
						},
						"description": "Endpoint di test per verificare l'autenticazione JWT."
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Stato risposta è 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Risposta contiene messaggio di autenticazione riuscita\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Autenticazione riuscita\");",
									"    pm.expect(jsonData).to.have.property('payload');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				}
			],
			"description": "Richieste relative all'autenticazione JWT."
		},
		{
			"name": "Status",
			"item": [
				{
					"name": "Stato del Servizio (JSON)",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/status",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"status"
							]
						},
						"description": "Restituisce lo stato del servizio in formato JSON."
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Stato risposta è 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type è application/json\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Risposta contiene stato del servizio\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('status');",
									"    pm.expect(jsonData.status).to.eql(\"online\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Stato del Servizio (XML)",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/status?format=xml",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"status"
							],
							"query": [
								{
									"key": "format",
									"value": "xml"
								}
							]
						},
						"description": "Restituisce lo stato del servizio in formato XML."
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Stato risposta è 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type è application/xml\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/xml\");",
									"});",
									"",
									"pm.test(\"Risposta XML contiene stato del servizio\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"<status>\");",
									"    pm.expect(pm.response.text()).to.include(\"</status>\");",
									"    pm.expect(pm.response.text()).to.include(\"online\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				}
			],
			"description": "Richieste relative allo stato del servizio."
		},
		{
			"name": "Eventi",
			"item": [
				{
					"name": "Lista Eventi (JSON)",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/eventi",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"eventi"
							]
						},
						"description": "Restituisce la lista di tutti gli eventi in formato JSON."
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Stato risposta è 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type è application/json\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Risposta contiene lista di eventi\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('articles');",
									"    pm.expect(jsonData.articles).to.be.an('array').that.is.not.empty;",
									"    ",
									"    // Verifica la struttura del primo evento",
									"    var primoEvento = jsonData.articles[0];",
									"    pm.expect(primoEvento).to.have.property('id');",
									"    pm.expect(primoEvento).to.have.property('title');",
									"    pm.expect(primoEvento).to.have.property('description');",
									"    pm.expect(primoEvento).to.have.property('url');",
									"    pm.expect(primoEvento).to.have.property('start_event_date');",
									"    pm.expect(primoEvento).to.have.property('end_event_date');",
									"    pm.expect(primoEvento).to.have.property('event_location');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Lista Eventi (XML)",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/eventi?format=xml",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"eventi"
							],
							"query": [
								{
									"key": "format",
									"value": "xml"
								}
							]
						},
						"description": "Restituisce la lista di tutti gli eventi in formato XML."
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Stato risposta è 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type è application/xml\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/xml\");",
									"});",
									"",
									"pm.test(\"Risposta XML contiene lista di eventi\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"<articles>\");",
									"    pm.expect(pm.response.text()).to.include(\"</articles>\");",
									"    pm.expect(pm.response.text()).to.include(\"<title>\");",
									"    pm.expect(pm.response.text()).to.include(\"<description>\");",
									"    pm.expect(pm.response.text()).to.include(\"<url>\");",
									"    pm.expect(pm.response.text()).to.include(\"<start_event_date>\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Ricerca Eventi per Data (JSON)",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/eventi/date-search?start_date=2025-06-01&end_date=2025-07-31",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"eventi",
								"date-search"
							],
							"query": [
								{
									"key": "start_date",
									"value": "2025-06-01"
								},
								{
									"key": "end_date",
									"value": "2025-07-31"
								}
							]
						},
						"description": "Ricerca eventi per intervallo di date in formato JSON."
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Stato risposta è 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type è application/json\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Risposta contiene eventi nel periodo specificato\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"    ",
									"    if (jsonData.length > 0) {",
									"        // Verifica che gli eventi siano nel periodo specificato",
									"        jsonData.forEach(function(evento) {",
									"            var dataInizio = new Date(evento.dataInizio.split('T')[0]);",
									"            pm.expect(dataInizio >= new Date('2025-06-01')).to.be.true;",
									"            pm.expect(dataInizio <= new Date('2025-07-31')).to.be.true;",
									"            ",
									"            // Verifica la struttura dell'evento",
									"            pm.expect(evento).to.have.property('id');",
									"            pm.expect(evento).to.have.property('nome');",
									"            pm.expect(evento).to.have.property('descrizione');",
									"            pm.expect(evento).to.have.property('dataInizio');",
									"        });",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Ricerca Eventi per Data (XML)",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/eventi/date-search?start_date=2025-06-01&end_date=2025-07-31&format=xml",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"eventi",
								"date-search"
							],
							"query": [
								{
									"key": "start_date",
									"value": "2025-06-01"
								},
								{
									"key": "end_date",
									"value": "2025-07-31"
								},
								{
									"key": "format",
									"value": "xml"
								}
							]
						},
						"description": "Ricerca eventi per intervallo di date in formato XML."
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Stato risposta è 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type è application/xml\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/xml\");",
									"});",
									"",
									"pm.test(\"Risposta XML contiene eventi\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"<response>\");",
									"    pm.expect(pm.response.text()).to.include(\"</response>\");",
									"    pm.expect(pm.response.text()).to.include(\"<id>\");",
									"    pm.expect(pm.response.text()).to.include(\"<nome>\");",
									"    pm.expect(pm.response.text()).to.include(\"<descrizione>\");",
									"    pm.expect(pm.response.text()).to.include(\"<dataInizio>\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Ricerca Eventi con Date Invalide",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/eventi/date-search?start_date=2025-07-31&end_date=2025-06-01",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"eventi",
								"date-search"
							],
							"query": [
								{
									"key": "start_date",
									"value": "2025-07-31"
								},
								{
									"key": "end_date",
									"value": "2025-06-01"
								}
							]
						},
						"description": "Testa la gestione degli errori quando la data di inizio è successiva alla data di fine."
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Stato risposta è 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Content-Type è application/problem+json\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/problem+json\");",
									"});",
									"",
									"pm.test(\"Risposta contiene dettagli dell'errore\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('type');",
									"    pm.expect(jsonData).to.have.property('title');",
									"    pm.expect(jsonData).to.have.property('status');",
									"    pm.expect(jsonData).to.have.property('detail');",
									"    ",
									"    pm.expect(jsonData.status).to.eql(400);",
									"    pm.expect(jsonData.detail).to.include(\"data di inizio\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				}
			],
			"description": "Richieste relative agli eventi."
		},
		{
			"name": "Errori",
			"item": [
				{
					"name": "Richiesta senza Token",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/status",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"status"
							]
						},
						"description": "Testa la gestione degli errori quando il token JWT è mancante."
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Stato risposta è 401 Unauthorized\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Content-Type è application/problem+json\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/problem+json\");",
									"});",
									"",
									"pm.test(\"Risposta contiene dettagli dell'errore di autenticazione\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('type');",
									"    pm.expect(jsonData).to.have.property('title');",
									"    pm.expect(jsonData).to.have.property('status');",
									"    pm.expect(jsonData).to.have.property('detail');",
									"    ",
									"    pm.expect(jsonData.status).to.eql(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Richiesta con Token Malformato",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer token_malformato",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/status",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"status"
							]
						},
						"description": "Testa la gestione degli errori quando il token JWT è malformato."
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Stato risposta è 401 Unauthorized\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Content-Type è application/problem+json\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/problem+json\");",
									"});",
									"",
									"pm.test(\"Risposta contiene dettagli dell'errore di token malformato\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('type');",
									"    pm.expect(jsonData).to.have.property('title');",
									"    pm.expect(jsonData).to.have.property('status');",
									"    pm.expect(jsonData).to.have.property('detail');",
									"    ",
									"    pm.expect(jsonData.status).to.eql(401);",
									"    pm.expect(jsonData.detail).to.include(\"JWT\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Richiesta con Token Scaduto",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{expired_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/status",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"status"
							]
						},
						"description": "Testa la gestione degli errori quando il token JWT è scaduto."
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Stato risposta è 401 Unauthorized\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Content-Type è application/problem+json\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/problem+json\");",
									"});",
									"",
									"pm.test(\"Risposta contiene dettagli dell'errore di token scaduto\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('type');",
									"    pm.expect(jsonData).to.have.property('title');",
									"    pm.expect(jsonData).to.have.property('status');",
									"    pm.expect(jsonData).to.have.property('detail');",
									"    ",
									"    pm.expect(jsonData.status).to.eql(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				}
			],
			"description": "Richieste per testare la gestione degli errori."
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8000",
			"type": "string"
		},
		{
			"key": "jwt_token",
			"value": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ0ZXN0X3VzZXIiLCJpc3MiOiJQRE5EIiwiYXVkIjoiaHR0cHM6Ly9nb3Z3YXkucHVibGlzeXMuaXQvZ292d2F5L0NvbXVuZVZpbGxhZGlicmlhbm8vRXZlbnRpL3YxIiwiaWF0IjoxNjE5MDIzMjAwLCJuYmYiOjE2MTkwMjMyMDAsImV4cCI6MTkxOTAyMzIwMCwianRpIjoiMTIzNDU2Nzg5IiwiY2xpZW50X2lkIjoidGVzdF9jbGllbnQiLCJwdXJwb3NlIjoidGVzdCJ9.Cz1RjS4BO-S4VmIvqVrKrCdOH9X9V8Ow5WCTgIQULXXgGAOc7k9AhQl_-Yv_QKYQf5oBUZYAFZP9jbzuLLGkXdlZKOC9VBOV4c9Tv-PgbWHlRm2Wz9IOblR9QkQjULRgC-LMK2LJpVej0xqHGqAjTYnR3xLnGSEZ-5_QKXD_vXJdpVXeKPTY_5Jn7Qe1JtFqVPwvXC9S9ypSE9ULGBTuZODUsjOH1K7ZIafg1TN-3DGGCnWZDa-4Z8UxU4hTJQMm_slAOV_KYAhP-8xNaS1lOtvKSTjQfJqP-KaQxwJ5R4-5QCnCQfQRBmMl9VVJ7glnrghIEWwcmjGpGYshRQnQXw",
			"type": "string"
		}
	]
}
